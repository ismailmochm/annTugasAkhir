
# def init():
#     global model, graph
#     # load the pre-trained Keras model
#     model = load_model('model.h5')
#     graph = tf.get_default_graph()


# @app.route("/predict", methods=['POST', 'GET'])
# def predict():
#     parameters = getParameters()
#     inputFeature = np.asarray(parameters).reshape(1, 6)
#     with graph.as_default():
#         raw_prediction = model.predict(inputFeature)[0][0]
#     if request.method == 'POST':
#         inputFeature = request.form.to_dict()
#         result = parameters(inputFeature)
#     return render_template("index.html", result=result)


# def getParameters():
#     parameters = []
#     parameters.append(flask.request.args.get('Penggugat'))
#     parameters.append(flask.request.args.get('Tergugat'))
#     parameters.append(flask.request.args.get('LNikah'))
#     parameters.append(flask.request.args.get('JumAnak'))
#     parameters.append(flask.request.args.get('Indikator'))
#     parameters.append(flask.request.args.get('Mediasi'))
#     return parameters

# # Cross origin support


# def sendResponse(responseObj):
#     response = flask.jsonify(responseObj)
#     response.headers.add('Access-Control-Allow-Origin', '*')
#     response.headers.add('Access-Control-Allow-Methods', 'GET')
#     response.headers.add('Access-Control-Allow-Headers',
#                          'accept,content-type,Origin,X-Requested-With,Content-Type,access_token,Accept,Authorization,source')
#     response.headers.add('Access-Control-Allow-Credentials', True)
#     return response